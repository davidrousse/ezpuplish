<?php
// Cached transformation data
// Type: Group:search
// Charset: utf-8
// Cached transformation data
$data = array (
  'table' => 
  array (
    '﻿' => ' ',
    ' ' => ' ',
    'Ԏ' => 'ԏ',
    'Ԍ' => 'ԍ',
    'Ԋ' => 'ԋ',
    'Ԉ' => 'ԉ',
    'Ԇ' => 'ԇ',
    'Ԅ' => 'ԅ',
    'Ԃ' => 'ԃ',
    'Ԁ' => 'ԁ',
    'ӹ' => 'ы',
    'Ӹ' => 'ы',
    'ӵ' => 'ч',
    'Ӵ' => 'ч',
    'ӳ' => 'у',
    'Ӳ' => 'у',
    'ӱ' => 'у',
    'Ӱ' => 'у',
    'ӯ' => 'у',
    'Ӯ' => 'у',
    'ӭ' => 'э',
    'Ӭ' => 'э',
    'ӫ' => 'ө',
    'Ӫ' => 'ө',
    'Ө' => 'ө',
    'ӧ' => 'о',
    'Ӧ' => 'о',
    'ӥ' => 'и',
    'Ӥ' => 'и',
    'ӣ' => 'и',
    'Ӣ' => 'и',
    'Ӡ' => 'ӡ',
    'ӟ' => 'з',
    'Ӟ' => 'з',
    'ӝ' => 'ж',
    'Ӝ' => 'ж',
    'ӛ' => 'ә',
    'Ӛ' => 'ә',
    'Ә' => 'ә',
    'ӗ' => 'е',
    'Ӗ' => 'е',
    'Ӕ' => 'ӕ',
    'ӓ' => 'а',
    'Ӓ' => 'а',
    'ӑ' => 'а',
    'Ӑ' => 'а',
    'Ӎ' => 'ӎ',
    'Ӌ' => 'ӌ',
    'Ӊ' => 'ӊ',
    'Ӈ' => 'ӈ',
    'Ӆ' => 'ӆ',
    'Ӄ' => 'ӄ',
    'ӂ' => 'ж',
    'Ӂ' => 'ж',
    'Ҿ' => 'ҿ',
    'Ҽ' => 'ҽ',
    'Һ' => 'һ',
    'Ҹ' => 'ҹ',
    'Ҷ' => 'ҷ',
    'Ҵ' => 'ҵ',
    'Ҳ' => 'ҳ',
    'Ұ' => 'ұ',
    'Ү' => 'ү',
    'Ҭ' => 'ҭ',
    'Ҫ' => 'ҫ',
    'Ҩ' => 'ҩ',
    'Ҧ' => 'ҧ',
    'Ҥ' => 'ҥ',
    'Ң' => 'ң',
    'Ҡ' => 'ҡ',
    'Ҟ' => 'ҟ',
    'Ҝ' => 'ҝ',
    'Қ' => 'қ',
    'Ҙ' => 'ҙ',
    'Җ' => 'җ',
    'Ҕ' => 'ҕ',
    'Ғ' => 'ғ',
    'Ґ' => 'ґ',
    'Ҏ' => 'ҏ',
    'Ҍ' => 'ҍ',
    'Ҋ' => 'ҋ',
    '҉' => ' ',
    '҈' => ' ',
    '҆' => ' ',
    '҅' => ' ',
    '҄' => ' ',
    '҃' => ' ',
    '҂' => ' ',
    'Ҁ' => 'ҁ',
    'Ѿ' => 'ѿ',
    'Ѽ' => 'ѽ',
    'Ѻ' => 'ѻ',
    'Ѹ' => 'ѹ',
    'ѷ' => 'ѵ',
    'Ѷ' => 'ѵ',
    'Ѵ' => 'ѵ',
    'Ѳ' => 'ѳ',
    'Ѱ' => 'ѱ',
    'Ѯ' => 'ѯ',
    'Ѭ' => 'ѭ',
    'Ѫ' => 'ѫ',
    'Ѩ' => 'ѩ',
    'Ѧ' => 'ѧ',
    'Ѥ' => 'ѥ',
    'Ѣ' => 'ѣ',
    'Ѡ' => 'ѡ',
    'ў' => 'у',
    'ѝ' => 'и',
    'ќ' => 'к',
    'ї' => 'і',
    'ѓ' => 'г',
    'ё' => 'е',
    'ѐ' => 'е',
    'й' => 'и',
    'Я' => 'я',
    'Ю' => 'ю',
    'Э' => 'э',
    'Ь' => 'ь',
    'Ы' => 'ы',
    'Ъ' => 'ъ',
    'Щ' => 'щ',
    'Ш' => 'ш',
    'Ч' => 'ч',
    'Ц' => 'ц',
    'Х' => 'х',
    'Ф' => 'ф',
    'У' => 'у',
    'Т' => 'т',
    'С' => 'с',
    'Р' => 'р',
    'П' => 'п',
    'О' => 'о',
    'Н' => 'н',
    'М' => 'м',
    'Л' => 'л',
    'К' => 'к',
    'Й' => 'и',
    'И' => 'и',
    'З' => 'з',
    'Ж' => 'ж',
    'Е' => 'е',
    'Д' => 'д',
    'Г' => 'г',
    'В' => 'в',
    'Б' => 'б',
    'А' => 'а',
    'Џ' => 'џ',
    'Ў' => 'у',
    'Ѝ' => 'и',
    'Ќ' => 'к',
    'Ћ' => 'ћ',
    'Њ' => 'њ',
    'Љ' => 'љ',
    'Ј' => 'ј',
    'Ї' => 'і',
    'І' => 'і',
    'Ѕ' => 'ѕ',
    'Є' => 'є',
    'Ѓ' => 'г',
    'Ђ' => 'ђ',
    'Ё' => 'е',
    'Ѐ' => 'е',
    'Ϯ' => 'ϯ',
    'Ϭ' => 'ϭ',
    'Ϫ' => 'ϫ',
    'Ϩ' => 'ϩ',
    'Ϧ' => 'ϧ',
    'Ϥ' => 'ϥ',
    'Ϣ' => 'ϣ',
    'Ϡ' => 'ϡ',
    'Ϟ' => 'ϟ',
    'Ϝ' => 'ϝ',
    'Ϛ' => 'ϛ',
    'ϔ' => 'ϒ',
    'ώ' => 'ω',
    'ύ' => 'υ',
    'ό' => 'ο',
    'ϋ' => 'υ',
    'ϊ' => 'ι',
    'ΰ' => 'υ',
    'ί' => 'ι',
    'ή' => 'η',
    'έ' => 'ε',
    'ά' => 'α',
    'Ϋ' => 'υ',
    'Ϊ' => 'ι',
    'Ω' => 'ω',
    'Ψ' => 'ψ',
    'Χ' => 'χ',
    'Φ' => 'φ',
    'Υ' => 'υ',
    'Τ' => 'τ',
    'Σ' => 'σ',
    'Ρ' => 'ρ',
    'Π' => 'π',
    'Ο' => 'ο',
    'Ξ' => 'ξ',
    'Ν' => 'ν',
    'Μ' => 'μ',
    'Λ' => 'λ',
    'Κ' => 'κ',
    'Ι' => 'ι',
    'Θ' => 'θ',
    'Η' => 'η',
    'Ζ' => 'ζ',
    'Ε' => 'ε',
    'Δ' => 'δ',
    'Γ' => 'γ',
    'Β' => 'β',
    'Α' => 'α',
    'ΐ' => 'ι',
    'Ώ' => 'ω',
    'Ύ' => 'υ',
    'Ό' => 'ο',
    'Ί' => 'ι',
    'Ή' => 'η',
    'Έ' => 'ε',
    '·' => ' ',
    'Ά' => 'α',
    '΅' => '',
    '΄' => ' ',
    ';' => '.',
    'ͺ' => ' ',
    '˝' => ' ',
    'ˏ' => ' ',
    'ˎ' => ' ',
    'ˋ' => ' ',
    'ˊ' => ' ',
    'ž' => 'z',
    'Ž' => 'z',
    'ż' => 'z',
    'Ż' => 'z',
    'ź' => 'z',
    'Ź' => 'z',
    'Ÿ' => 'y',
    'ŷ' => 'y',
    'Ŷ' => 'y',
    'ŵ' => 'w',
    'Ŵ' => 'w',
    'ų' => 'u',
    'Ų' => 'u',
    'ű' => 'u',
    'Ű' => 'u',
    'ů' => 'u',
    'Ů' => 'u',
    'ŭ' => 'u',
    'Ŭ' => 'u',
    'ū' => 'u',
    'Ū' => 'u',
    'ũ' => 'u',
    'Ũ' => 'u',
    'ŧ' => 't',
    'Ŧ' => 't',
    'ť' => 't',
    'Ť' => 't',
    'ţ' => 't',
    'Ţ' => 't',
    'š' => 's',
    'Š' => 's',
    'ş' => 's',
    'Ş' => 's',
    'ŝ' => 's',
    'Ŝ' => 's',
    'ś' => 's',
    'Ś' => 's',
    'ř' => 'r',
    'Ř' => 'r',
    'ŗ' => 'r',
    'Ŗ' => 'r',
    'ŕ' => 'r',
    'Ŕ' => 'r',
    'Œ' => 'œ',
    'ő' => 'o',
    'Ő' => 'o',
    'ŏ' => 'o',
    'Ŏ' => 'o',
    'ō' => 'o',
    'Ō' => 'o',
    'Ŋ' => 'ŋ',
    'ň' => 'n',
    'Ň' => 'n',
    'ņ' => 'n',
    'Ņ' => 'n',
    'ń' => 'n',
    'Ń' => 'n',
    'ł' => 'l',
    'Ł' => 'l',
    'ŀ' => 'l',
    'Ŀ' => 'l',
    'ľ' => 'l',
    'Ľ' => 'l',
    'ļ' => 'l',
    'Ļ' => 'l',
    'ĺ' => 'l',
    'Ĺ' => 'l',
    'ķ' => 'k',
    'Ķ' => 'k',
    'ĵ' => 'j',
    'Ĵ' => 'j',
    'Ĳ' => 'ĳ',
    'ı' => 'i',
    'İ' => 'i',
    'į' => 'i',
    'Į' => 'i',
    'ĭ' => 'i',
    'Ĭ' => 'i',
    'ī' => 'i',
    'Ī' => 'i',
    'ĩ' => 'i',
    'Ĩ' => 'i',
    'ħ' => 'h',
    'Ħ' => 'h',
    'ĥ' => 'h',
    'Ĥ' => 'h',
    'ģ' => 'g',
    'Ģ' => 'g',
    'ġ' => 'g',
    'Ġ' => 'g',
    'ğ' => 'g',
    'Ğ' => 'g',
    'ĝ' => 'g',
    'Ĝ' => 'g',
    'ě' => 'e',
    'Ě' => 'e',
    'ę' => 'e',
    'Ę' => 'e',
    'ė' => 'e',
    'Ė' => 'e',
    'ĕ' => 'e',
    'Ĕ' => 'e',
    'ē' => 'e',
    'Ē' => 'e',
    'đ' => 'd',
    'Đ' => 'd',
    'ď' => 'd',
    'Ď' => 'd',
    'č' => 'c',
    'Č' => 'c',
    'ċ' => 'c',
    'Ċ' => 'c',
    'ĉ' => 'c',
    'Ĉ' => 'c',
    'ć' => 'c',
    'Ć' => 'c',
    'ą' => 'a',
    'Ą' => 'a',
    'ă' => 'a',
    'Ă' => 'a',
    'ā' => 'a',
    'Ā' => 'a',
    'ÿ' => 'y',
    'þ' => 'th',
    'ý' => 'y',
    'ü' => 'u',
    'û' => 'u',
    'ú' => 'u',
    'ù' => 'u',
    '÷' => ' ',
    'ö' => 'o',
    'õ' => 'o',
    'ô' => 'o',
    'ó' => 'o',
    'ò' => 'o',
    'ñ' => 'n',
    'ð' => 'd',
    'ï' => 'i',
    'î' => 'i',
    'í' => 'i',
    'ì' => 'i',
    'ë' => 'e',
    'ê' => 'e',
    'é' => 'e',
    'è' => 'e',
    'ç' => 'c',
    'ä' => 'a',
    'ã' => 'a',
    'â' => 'a',
    'á' => 'a',
    'à' => 'a',
    'ß' => 'ss',
    'Þ' => 'th',
    'Ý' => 'y',
    'Ü' => 'u',
    'Û' => 'u',
    'Ú' => 'u',
    'Ù' => 'u',
    'Ø' => 'ø',
    '×' => '*',
    'Ö' => 'o',
    'Õ' => 'o',
    'Ô' => 'o',
    'Ó' => 'o',
    'Ò' => 'o',
    'Ñ' => 'n',
    'Ð' => 'd',
    'Ï' => 'i',
    'Î' => 'i',
    'Í' => 'i',
    'Ì' => 'i',
    'Ë' => 'e',
    'Ê' => 'e',
    'É' => 'e',
    'È' => 'e',
    'Ç' => 'c',
    'Æ' => 'æ',
    'Å' => 'å',
    'Ä' => 'a',
    'Ã' => 'a',
    'Â' => 'a',
    'Á' => 'a',
    'À' => 'a',
    '¿' => '.',
    '¾' => '3 4',
    '½' => '1 2',
    '¼' => '1 4',
    '»' => '"',
    'º' => '1',
    '¹' => '1',
    '¸' => ' ',
    '·' => ' ',
    '¶' => ' ',
    'µ' => ' ',
    '´' => ' ',
    '³' => '3',
    '²' => '2',
    '±' => '  ',
    '°' => ' ',
    '¯' => ' ',
    '®' => ' r ',
    '­' => '',
    '¬' => ' ',
    '«' => '"',
    'ª' => 'a',
    '©' => ' c ',
    '¨' => '',
    '§' => ' ',
    '¦' => ' ',
    '¥' => ' ',
    '¤' => ' ',
    '£' => ' ',
    '¢' => ' ',
    '¡' => '.',
    ' ' => ' ',
    '' => 'y',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '~' => ' ',
    '}' => ' ',
    '|' => ' ',
    '{' => ' ',
    '`' => ' ',
    '^' => ' ',
    ']' => ' ',
    '\\' => ' ',
    '[' => ' ',
    'Z' => 'z',
    'Y' => 'y',
    'X' => 'x',
    'W' => 'w',
    'V' => 'v',
    'U' => 'u',
    'T' => 't',
    'S' => 's',
    'R' => 'r',
    'Q' => 'q',
    'P' => 'p',
    'O' => 'o',
    'N' => 'n',
    'M' => 'm',
    'L' => 'l',
    'K' => 'k',
    'J' => 'j',
    'I' => 'i',
    'H' => 'h',
    'G' => 'g',
    'F' => 'f',
    'E' => 'e',
    'D' => 'd',
    'C' => 'c',
    'B' => 'b',
    'A' => 'a',
    '@' => ' ',
    '?' => '.',
    '>' => ' ',
    '=' => ' ',
    '<' => ' ',
    ';' => ' ',
    ':' => ' ',
    '/' => ' ',
    '-' => ' ',
    ',' => '.',
    '+' => ' ',
    ')' => ' ',
    '(' => ' ',
    '\'' => ' ',
    '&' => ' ',
    '$' => ' ',
    '#' => ' ',
    '!' => '.',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '
' => ' ',
    '	' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
    '' => ' ',
  ),
);
$text = strtr( $text, $data['table'] );
// add N-Gram(N=2)  chinese / japanese / korean multibyte characters
$codec = eZTextCodec::instance( false, 'unicode' );

$unicodeValueArray = $codec->convertString( $text );

$normalizedTextArray = array();
$bFlag = false;
foreach ( array_keys( $unicodeValueArray ) as $valueKey )
{
    // Check for word characters that should be broken up for search
    if ( ( $unicodeValueArray[$valueKey] >= 12289 and
           $unicodeValueArray[$valueKey] <= 12542 ) or
         ( $unicodeValueArray[$valueKey] >= 13312 and
           $unicodeValueArray[$valueKey] <= 40863 ) or
         ( $unicodeValueArray[$valueKey] >= 44032 and
           $unicodeValueArray[$valueKey] <= 55203 ) )
    {
        if ( $bFlag )
        {
            $normalizedTextArray[] = $unicodeValueArray[$valueKey];
        }
        $normalizedTextArray[] = 32; // A space
        $normalizedTextArray[] = $unicodeValueArray[$valueKey];
        $bFlag = true;
    }
    else
    {
        if ( $bFlag )
        {
            $normalizedTextArray[] = 32; // A space
        }
        $normalizedTextArray[] = $unicodeValueArray[$valueKey];
        $bFlag = false;
    }
}
if ( $bFlag )
{
    $normalizedTextArray[count($normalizedTextArray)-1]=32;
}
$revCodec = eZTextCodec::instance( 'unicode', false ); // false means use internal charset
$text = $revCodec->convertString( $normalizedTextArray );
$text = preg_replace( array( "#(\.){2,}#",
                             "#^\.#",
                             "#\s\.#",
                             "#\.\s#",
                             "#\.$#",
                             "#([^0-9])%#" ),
                      array( " ",
                             " ",
                             " ",
                             " ",
                             " ",
                             " " ),
                      $text );
$ini = eZINI::instance();
if ( $ini->variable( 'SearchSettings', 'EnableWildcard' ) != 'true' )
{
    $text = str_replace( "*", " ", $text );
}
$charset = eZTextCodec::internalCharset();
$hasUTF8 = ( $charset == "utf-8" );

if ( $hasUTF8 )
{
    $text = preg_replace( "#(\s+)#u", " ", $text );
}
else
{
    $text = preg_replace( "#(\s+)#", " ", $text );
}
?>
